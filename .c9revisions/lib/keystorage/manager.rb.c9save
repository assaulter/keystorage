{"ts":1348153217015,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'yaml'\nrequire 'openssl'\n\nmodule Keystorage\n  class << self\n    def list(group=nil,file=nil)\n      Manager.new(file).list(group)\n    end\n    \n    def set(group,key,value,file=nil)\n      Manager.new(file).set(group,key,value)\n    end\n    \n    def get(group,name,file=nil)\n      Manager.new(file).get(group,name)\n    end\n\n    def delete(group,name=nil,file=nil)\n      Manager.new(file).delete(group,name)\n    end\n\n  end\n\n  class Manager\n\n    def initialize(file=nil)\n      @file = DEFAULT_FILE\n      @file = file if file\n    end\n\n    def list(group=nil)\n      data = Hash.new\n      if File::exist?(@file)\n        File.open(@file,'r') do |f|\n          data = YAML.load(f)\n          return data.keys unless group\n          return data[group].keys if data[group]\n        end\n      end\n      Hash.new\n    end\n\n    def get(group,name)\n      raise \"missing group\" unless group\n      raise \"missing name\" unless name\n\n      begin\n        File.open(@file,'r') do |f|\n          data=YAML.load(f)\n          raise \"missing keystorage\" unless data\n          raise \"missing group \"+group unless data.has_key?(group)\n          raise \"missing group \"+group+\" name \"+name unless data[group].has_key?(name)\n\n          return decode(data[group][name])\n        end\n      rescue =>e\n      end\n      false\n    end\n\n    def all\n      return YAML.load_file(@file) if File.exist?(@file)\n      Hash.new\n    end\n\n    def set(group,key,value)\n      data=all\n      data = Hash.new unless data\n      data[group] = Hash.new unless data.has_key?(group)\n      data[group][key] = encode(value)\n      write(data)\n    end\n\n    def write(data)\n      File.open(@file,'w',0600) do |f|\n        YAML.dump(data,f)\n      end\n    end\n\n    def delete(group,name = nil)\n      data = all\n      if name\n        data[group].delete(name) if data[group]\n      else\n        data.delete(group) if data\n      end\n      write(data)\n    end\n\n    def encode(str,salt=\"3Qw9EtWE\")\n      enc = OpenSSL::Cipher::Cipher.new('aes256')\n      enc.encrypt.pkcs5_keyivgen(salt)\n      ((enc.update(str) + enc.final).unpack(\"H*\")).to_s\n    end\n\n    def decode(str,salt=\"3Qw9EtWE\")\n      dec = OpenSSL::Cipher::Cipher.new('aes256')\n      dec.decrypt.pkcs5_keyivgen(salt)\n      (dec.update(Array.new([str]).pack(\"H*\")) + dec.final)\n    end\n  end\n\n\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":2288}]],"length":2288}
